###############################################################################
Assembly Language Specification
###############################################################################

This file describes the assembly language used by gdcc-as. By necessity it also
describes the intermediary representation system of GDCC, as the assembler is a
direct interface to it.

===============================================================================
Declarations
===============================================================================

Syntax:
  assembly-unit:
    declaration(opt) assembly-unit(opt)

  declaration:
    new-line
    function-declaration
    glyph-declaration
    import-declaration
    macro-declaration
    object-declaration
    space-declaration
    strent-declaration

Semantics:
  An assembly file is a series of declarations.

===========================================================
Functions
===========================================================

Syntax:
  function-declaration:
    <Function> string function-argument-list(opt) new-line

  function-argument-list:
    function-argument function-argument-list(opt)

  function-argument:
    <alloc> = expression
    <block> new-line { statement-list(opt) }
    <ctype> = call-type-specifier
    <defin> = expression
    <label> = string
    <linka> = linkage-specifier
    <localArs> = expression
    <localReg> = expression
    <param> = expression
    <retrn> = expression
    <sflagClS> = expression
    <sflagNet> = expression
    <stype> = script-type-specifier
    <valueInt> = expression
    <valueStr> = string

  statement-list:
    statement statement-list(opt)

Semantics:
  Defines a function. This includes ACS scripts, which are distinguished by the
  call type.

-----------------------------------------------------------
alloc (boolean)
-----------------------------------------------------------

Semantics:
  If 1, then the function will be given a generated valueInt if needed.

-----------------------------------------------------------
block
-----------------------------------------------------------

Semantics:
  Sets the block of statements associated with the function.

-----------------------------------------------------------
ctype
-----------------------------------------------------------

Semantics:
  Sets the function's call type.

-----------------------------------------------------------
defin (boolean)
-----------------------------------------------------------

Semantics:
  If 1, then the function is considered defined. Otherwise, it is considered
  external and needing import.

-----------------------------------------------------------
label
-----------------------------------------------------------

Semantics:
  Sets the label for the function's entry point. The label will be used for the
  function's first statement and must not be explicitly defined.

-----------------------------------------------------------
linka
-----------------------------------------------------------

Semantics:
  Sets the function's linkage.

-----------------------------------------------------------
localArs
-----------------------------------------------------------

Semantics:
  Sets the number of words to allocate for addressable locals.

-----------------------------------------------------------
localReg
-----------------------------------------------------------

Semantics:
  Sets the number of words to allocate for register locals.

  This must include register locals that are also function arguments, but does
  not need to include function arguments that are not register locals.

-----------------------------------------------------------
param
-----------------------------------------------------------

Semantics:
  Sets the number of parameter words.

-----------------------------------------------------------
retrn
-----------------------------------------------------------

Semantics:
  Sets the number of return words.

-----------------------------------------------------------
sflagClS (boolean)
-----------------------------------------------------------

Semantics:
  Sets the "clientside" script flag.

-----------------------------------------------------------
sflagNet (boolean)
-----------------------------------------------------------

Semantics:
  Sets the "net" script flag.

-----------------------------------------------------------
stype
-----------------------------------------------------------

Semantics:
  Sets the script type of the function.

-----------------------------------------------------------
valueInt
-----------------------------------------------------------

Semantics:
  Sets the function's integer value. Usually the index or ACS script number.

-----------------------------------------------------------
valueStr
-----------------------------------------------------------

Semantics:
  Sets the function's string value. Only meaningful for ACS named scripts.

===========================================================
Glyphs
===========================================================

Syntax:
  glyph-declaration:
    <Glyph> string glyph-argument-list(opt) new-line

  glyph-argument-list:
    glyph-argument glyph-argument-list(opt)

  glyph-argument:
    <type> = type
    <value> = expression

-----------------------------------------------------------
type
-----------------------------------------------------------

Semantics:
  Sets the glyph's type.

-----------------------------------------------------------
value
-----------------------------------------------------------

Semantics:
  Sets the glyph's value. The type of the expression must match the glyph's type.

===========================================================
Imports
===========================================================

Syntax:
  import-declaration:
    <Import> string new-line

Semantics:
  Specifies a library to link with at load-time.

===========================================================
Macros
===========================================================

Syntax:
  macro-declaration:
    <Macro> identifier new-line(opt) { statement-list(opt) }

  identifier:
    non-digit
    identifier non-digit
    identifier digit

  non-digit: one of
    A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
    a b c d e f g h i j k l m n o p q r s t u v w x y z
    _

  digit: one of
    0 1 2 3 4 5 6 7 8 9

Semantics:
  Defines a macro that can be used to insert a statement list into another
  statement list. Any arguments in the macro of type Cpy are replaced by the
  numbered argument to the macro invocation.

  Macros are not part of the Intermediary Representation and exist only during
  assembling. Thus, their names have no linkage.

===========================================================
Objects
===========================================================

Syntax:
  object-declaration:
    <Object> string object-argument-list(opt) new-line

  object-argument-list:
    object-argument object-argument-list(opt)

  object-argument:
    <alias> = expression
    <alloc> = expression
    <defin> = expression
    <initi> = expression
    <linka> = linkage-specifier
    <space> = address-specifier string
    <value> = expression
    <words> = expression

-----------------------------------------------------------
alias (boolean)
-----------------------------------------------------------

Semantics:
  If 1, then the object may share an address with an object or sub-object with
  equivalent initializer.

-----------------------------------------------------------
alloc
-----------------------------------------------------------

Semantics:
  If 1, then the object will be given a generated value if needed.

-----------------------------------------------------------
defin (boolean)
-----------------------------------------------------------

Semantics:
  If 1, then the object is considered defined. Otherwise, it is considered
  external and needing import.

-----------------------------------------------------------
initi
-----------------------------------------------------------

Semantics:
  Sets the initial state of the object.

-----------------------------------------------------------
linka
-----------------------------------------------------------

Semantics:
  Sets the object's linkage.

-----------------------------------------------------------
value
-----------------------------------------------------------

Semantics:
  Sets the objects's integer value. Usually the starting memory index.

-----------------------------------------------------------
words
-----------------------------------------------------------

Semantics:
  Sets the number of words needed for the object.

===========================================================
Spaces
===========================================================

Syntax:
  space-declaration:
    <Space> address-specifier string space-argument-list(opt) new-line

  space-argument-list:
    space-argument space-argument-list(opt)

  space-argument:
    <alloc> = expression
    <defin> = expression
    <linka> = linkage-specifier
    <value> = expression
    <words> = expression

Semantics:
  Defines an address space to contain objects.

-----------------------------------------------------------
alloc
-----------------------------------------------------------

Semantics:
  If 1, then the space will be given a generated value if needed.

-----------------------------------------------------------
defin
-----------------------------------------------------------

Semantics:
  If 1, then the space is considered defined. Otherwise, it is considered
  external and needing import.

-----------------------------------------------------------
linka
-----------------------------------------------------------

Semantics:
  Sets the space's linkage.

-----------------------------------------------------------
value
-----------------------------------------------------------

Semantics:
  Sets the space's integer value. Usually the index.

-----------------------------------------------------------
words
-----------------------------------------------------------

Semantics:
  Sets the number of words needed for the space.

===========================================================
String Entries
===========================================================

Syntax:
  strent-declaration:
    <StrEnt> string strent-argument-list(opt) new-line

  strent-argument-list:
    strent-argument strent-argument-list(opt)

  strent-argument:
    <alias> = expression
    <alloc> = expression
    <defin> = expression
    <valueInt> = expression
    <valueStr> = string

Semantics:
  Defines a target string table entry.

-----------------------------------------------------------
alias
-----------------------------------------------------------

Semantics:
  If 1, then the string entry may share an address with an equivalent string
  entry.

-----------------------------------------------------------
alloc
-----------------------------------------------------------

Semantics:
  If 1, then the string entry will be given a generated value if needed.

-----------------------------------------------------------
defin
-----------------------------------------------------------

Semantics:
  If 1, then the string entry is considered defined. Otherwise, it is
  considered external and needing import.

-----------------------------------------------------------
valueInt
-----------------------------------------------------------

Semantics:
  Sets the string entry's integer value.

-----------------------------------------------------------
valueStr
-----------------------------------------------------------

Semantics:
  Sets the string entry's string value.

===============================================================================
Statements
===============================================================================

Syntax:
  statement:
    statement-label-list(opt) statement-name argument-list(opt) new-line
    statement-label-list(opt) ! identifier argument-list(opt) new-line

  statement-label-list:
    string statement-label-list(opt)

  argument-list:
    , argument argument-list(opt)

Semantics:
  A statement is the IR's instruction.

  Statements starting with a ! are a macro invocation.

===========================================================
Statement Names
===========================================================

Syntax:
  statement-name:
    <Nop>
    <AddI_W>
    <AddU_W>
    <AndU_W>
    <Call>
    <Casm>
    <CmpI_EQ_W>
    <CmpI_GE_W>
    <CmpI_GT_W>
    <CmpI_LE_W>
    <CmpI_LT_W>
    <CmpI_NE_W>
    <CmpU_EQ_W>
    <CmpU_GE_W>
    <CmpU_GT_W>
    <CmpU_LE_W>
    <CmpU_LT_W>
    <CmpU_NE_W>
    <Cnat>
    <Cscr_IA>
    <Cscr_IS>
    <Cscr_SA>
    <Cscr_SS>
    <Cspe>
    <DivI_W>
    <DivX_W>
    <InvU_W>
    <Jcnd_Nil>
    <Jcnd_Tru>
    <Jump>
    <ModI_W>
    <Move_W>
    <MulI_W>
    <MulX_W>
    <NegI_W>
    <NotU_W>
    <OrIU_W>
    <OrXU_W>
    <Retn>
    <ShLU_W>
    <ShRI_W>
    <SubI_W>
    <SubU_W>
    <Swap_W>

===========================================================
Arguments
===========================================================

Syntax:
  argument:
    <Cpy> ( expression(opt) )
    <Far> ( argument argument-offset(opt) )
    <GblArr> ( argument , argument argument-offset(opt) )
    <GblArs> ( argument argument-offset(opt) )
    <GblReg> ( argument argument-offset(opt) )
    <Gen> ( argument argument-offset(opt) )
    <Lit> ( expression argument-offset(opt) )
    <Loc> ( argument argument-offset(opt) )
    <LocArs> ( argument argument-offset(opt) )
    <LocReg> ( argument argument-offset(opt) )
    <MapArr> ( argument , argument argument-offset(opt) )
    <MapArs> ( argument argument-offset(opt) )
    <MapReg> ( argument argument-offset(opt) )
    <Nul> ( )
    <Stk> ( )
    <StrArr> ( argument , argument argument-offset(opt) )
    <StrArs> ( argument argument-offset(opt) )
    <Vaa> ( argument argument-offset(opt) )
    <WldArr> ( argument , argument argument-offset(opt) )
    <WldArs> ( argument argument-offset(opt) )
    <WldReg> ( argument argument-offset(opt) )

  argument-offset:
    , expression

===============================================================================
Expressions
===============================================================================

Syntax:
  expression:
    aggregate
    aggregate-string
    number
    string
    value
    <Add> ( expression , expression )
    <AddPtrRaw> ( expression , expression )
    <BitAnd> ( expression , expression )
    <BitOrI> ( expression , expression )
    <BitOrX> ( expression , expression )
    <CmpEQ> ( expression , expression )
    <CmpGE> ( expression , expression )
    <CmpGT> ( expression , expression )
    <CmpLE> ( expression , expression )
    <CmpLT> ( expression , expression )
    <CmpNE> ( expression , expression )
    <Cnd> ( expression , expression , expression )
    <Cst> ( type , expression )
    <Div> ( expression , expression )
    <Inv> ( expression )
    <LogAnd> ( expression , expression )
    <LogOrI> ( expression , expression )
    <LogOrX> ( expression , expression )
    <Mod> ( expression , expression )
    <Mul> ( expression , expression )
    <Neg> ( expression )
    <Not> ( expression )
    <ShL> ( expression , expression )
    <ShR> ( expression , expression )
    <Sub> ( expression , expression )
    -- expression
    ~ expression
    ! expression
    * expression expression
    / expression expression
    % expression expression
    + expression expression
    - expression expression
    << expression expression
    >> expression expression
    < expression expression
    > expression expression
    <= expression expression
    >= expression expression
    == expression expression
    != expression expression
    & expression expression
    ^ expression expression
    | expression expression
    && expression expression
    ^^ expression expression
    || expression expression
    ? expression expression expression

  type:
    type-Array
    type-Assoc
    type-Empty
    type-Fixed
    type-Float
    type-Funct
    type-Point
    type-StrEn
    type-Tuple
    type-Union

  type-Array:
    <Array> ( type , expression )

  type-Assoc:
    <Assoc> ( type-assoc-list(opt) )

  type-Empty:
    <Empty> ( )

  type-Fixed:
    <Fixed> ( expression , expression , expression , expression )

  type-Float:
    <Float> ( expression , expression , expression , expression )

  type-Funct:
    <Funct> ( call-type-specifier )

  type-Point:
    <Point> ( address-specifier string , expression , expression )

  type-StrEn:
    <StrEn> ( )

  type-Tuple:
    <Tuple> ( type-list(opt) )

  type-Union:
    <Union> ( type-list(opt) )

  type-assoc-list:
    type-assoc
    type-assoc , type-assoc-list

  type-assoc:
    type string expression

  type-list:
    type
    type , type-list

===========================================================
Aggregates
===========================================================

Syntax:
  aggregate:
    <Tuple> ( expression-list(opt) )
    { expression-list(opt) }
    [ expression-list(opt) ]

  expression-list:
    expression
    expression , expression-list

Semantics:
  Results in a multi-part value. Each sub-expression has its own type.

  In the first and second forms, expression evaluation is deferred. In the
  third form, expressions are evaluated immediately and cannot contain unbacked
  glyphs.

===========================================================
Aggregate Strings
===========================================================

Syntax:
  aggregate-string:
    <string> type-Fixed(opt) string

Semantics:
  Results in a multi-part value comprised of the characters in the string. The
  type of each element is determined by an explicit type or a target-dependent
  default.

===========================================================
Numbers
===========================================================

Syntax:
  number:
    decimal-number number-suffix(opt)
    hexadecimal-number number-suffix(opt)
    octal-number number-suffix(opt)

  decimal-number:
    decimal-base decimal-fractional(opt) decimal-exponent(opt)
    decimal-integral(opt) decimal-fractional decimal-exponent(opt)

  hexadecimal-number:
    hexadecimal-base hexadecimal-fractional(opt) hexadecimal-exponent(opt)

  octal-number:
    octal-base decimal-exponent(opt)

  number-suffix:
    _ number-suffix-f(opt) number-suffix-s(opt) decimal-integral
      decimal-fractional number-suffix-s(opt)

  number-suffix-f: one of
    <F> <f>

  number-suffix-s: one of
    <S> <s>

  decimal-base:
    decimal-prefix decimal-integral(opt)

  decimal-fractional:
    . decimal-integral(opt)

  decimal-exponent:
    <E> sign(opt) decimal-integral
    <e> sign(opt) decimal-integral
    hexadecimal-exponent

  decimal-integral:
    digit decimal-integral(opt)

  decimal-prefix: one of
    1 2 3 4 5 6 7 8 9

  hexadecimal-base:
    hexadecimal-prefix hexadecimal-integral(opt)

  hexadecimal-fractional:
    . hexadecimal-integral(opt)

  hexadecimal-exponent:
    <P> sign(opt) decimal-integral
    <p> sign(opt) decimal-integral

  hexadecimal-integral:
    hexadecimal-digit hexadecimal-integral(opt)

  hexadecimal-digit: one of
    0 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f

  octal-base:
    octal-prefix octal-integral(opt)

  octal-prefix:
    0

  octal-integral:
    octal-digit octal-integral(opt)

  octal-digit: one of
    0 1 2 3 4 5 6 7

  sign: one of
    + -

===========================================================
Strings
===========================================================

Syntax:
  string:
    " char-sequence(opt) "

  char-sequence:
    char char-sequence(opt)

  char:
    any character except double-quote, backslash, or new-line
    escape-sequence

  escape-sequence:
    hexadecimal-escape-sequence
    octal-escape-sequence
    simple-escape-sequence

  hexadecimal-escape-sequence:
    \x hexadecimal-digit
    hexadecimal-escape-sequence hexadecimal-digit

  octal-escape-sequence:
    \ octal-digit
    \ octal-digit octal-digit
    \ octal-digit octal-digit octal-digit

  simple-escape-sequence: one of
    \' \" \? \\ \a \b \f \n \r \t \v

Semantics:
  As an expression, a string indicates a glyph to be resolved.

===========================================================
Values
===========================================================

Syntax:
  value:
    <Value> value-Array
    <Value> value-Assoc
    <Value> value-Empty
    <Value> value-Funct
    <Value> value-Point
    <Value> value-StrEn
    <Value> value-Tuple
    <Value> value-Union

-----------------------------------------------------------
Array
-----------------------------------------------------------

Syntax:
  value-Array:
    type-Array ( expression-list(opt) )

-----------------------------------------------------------
Assoc
-----------------------------------------------------------

Syntax:
  value-Assoc:
    type-Assoc ( expression-list(opt) )

-----------------------------------------------------------
Empty
-----------------------------------------------------------

Syntax:
  value-Empty:
    type-Empty ( )

-----------------------------------------------------------
Funct
-----------------------------------------------------------

Syntax:
  value-Funct:
    type-Funct ( expression )

-----------------------------------------------------------
Point
-----------------------------------------------------------

Syntax:
  value-Point:
    type-Point ( expression , address-specifier string )

-----------------------------------------------------------
StrEn
-----------------------------------------------------------

Syntax:
  value-StrEn:
    type-StrEn ( expression )

-----------------------------------------------------------
Tuple
-----------------------------------------------------------

Syntax:
  value-Tuple:
    type-Tuple ( expression-list(opt) )

-----------------------------------------------------------
Union
-----------------------------------------------------------

Syntax:
  value-Union:
    type-Union ( expression )

===============================================================================
Specifiers
===============================================================================

Syntax:
  address-specifier:
    <Cpy>
    <Far>
    <GblArr>
    <GblArs>
    <GblReg>
    <Gen>
    <Lit>
    <Loc>
    <LocArs>
    <LocReg>
    <MapArr>
    <MapArs>
    <MapReg>
    <Nul>
    <Stk>
    <StrArr>
    <StrArs>
    <Vaa>
    <WldArr>
    <WldArs>
    <WldReg>

  call-type-specifier:
    <Action>
    <AsmFunc>
    <LangACS>
    <LangASM>
    <LangAXX>
    <LangC>
    <LangCXX>
    <LangDS>
    <Native>
    <Script>
    <ScriptI>
    <ScriptS>
    <Special>
    <StdCall>
    <StkCall>

  linkage-specifier:
    <ExtACS>
    <ExtASM>
    <ExtC>
    <ExtCXX>
    <ExtDS>
    <IntC>
    <IntCXX>

  script-type-specifier:
    <None>
    <Death>
    <Disconnect>
    <Enter>
    <Lightning>
    <Open>
    <Respawn>
    <Return>
    <Unloading>

===============================================================================
Grammar
===============================================================================

  assembly-unit:
    declaration(opt) assembly-unit(opt)

  declaration:
    function-declaration
    glyph-declaration
    import-declaration
    macro-declaration
    object-declaration
    space-declaration
    strent-declaration

  function-declaration:
    <Function> string function-argument-list(opt) new-line

  function-argument-list:
    function-argument function-argument-list(opt)

  function-argument:
    <alloc> = expression
    <block> new-line { statement-list(opt) }
    <ctype> = call-type-specifier
    <defin> = expression
    <label> = string
    <linka> = linkage-specifier
    <localArs> = expression
    <localReg> = expression
    <param> = expression
    <retrn> = expression
    <sflagClS> = expression
    <sflagNet> = expression
    <stype> = script-type-specifier
    <valueInt> = expression
    <valueStr> = string

  glyph-declaration:
    <Glyph> string glyph-argument-list(opt) new-line

  glyph-argument-list:
    glyph-argument glyph-argument-list(opt)

  glyph-argument:
    <type> = type
    <value> = expression

  import-declaration:
    <Import> string new-line

  macro-declaration:
    <Macro> identifier new-line(opt) { statement-list(opt) }

  identifier:
    non-digit
    identifier non-digit
    identifier digit

  non-digit: one of
    A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
    a b c d e f g h i j k l m n o p q r s t u v w x y z
    _

  digit: one of
    0 1 2 3 4 5 6 7 8 9

  object-declaration:
    <Object> string object-argument-list(opt) new-line

  object-argument-list:
    object-argument object-argument-list(opt)

  object-argument:
    <alias> = expression
    <alloc> = expression
    <defin> = expression
    <initi> = expression
    <linka> = linkage-specifier
    <space> = address-specifier string
    <value> = expression
    <words> = expression

  space-declaration:
    <Space> address-specifier string space-argument-list(opt) new-line

  space-argument-list:
    space-argument space-argument-list(opt)

  space-argument:
    <alloc> = expression
    <defin> = expression
    <linka> = linkage-specifier
    <value> = expression
    <words> = expression

  strent-declaration:
    <StrEnt> string strent-argument-list(opt) new-line

  strent-argument-list:
    strent-argument strent-argument-list(opt)

  strent-argument:
    <alias> = expression
    <alloc> = expression
    <defin> = expression
    <valueInt> = expression
    <valueStr> = string

  statement-list:
    statement statement-list(opt)

  statement:
    statement-label-list(opt) statement-name argument-list(opt) new-line
    statement-label-list(opt) ! identifier argument-list(opt) new-line

  statement-label-list:
    string statement-label-list(opt)

  statement-name:
    <Nop>
    <AddI_W>
    <AddU_W>
    <AndU_W>
    <Call>
    <Casm>
    <CmpI_EQ_W>
    <CmpI_GE_W>
    <CmpI_GT_W>
    <CmpI_LE_W>
    <CmpI_LT_W>
    <CmpI_NE_W>
    <CmpU_EQ_W>
    <CmpU_GE_W>
    <CmpU_GT_W>
    <CmpU_LE_W>
    <CmpU_LT_W>
    <CmpU_NE_W>
    <Cnat>
    <Cscr_IA>
    <Cscr_IS>
    <Cscr_SA>
    <Cscr_SS>
    <Cspe>
    <DivI_W>
    <DivX_W>
    <InvU_W>
    <Jcnd_Nil>
    <Jcnd_Tru>
    <Jump>
    <ModI_W>
    <Move_W>
    <MulI_W>
    <MulX_W>
    <NegI_W>
    <NotU_W>
    <OrIU_W>
    <OrXU_W>
    <Retn>
    <ShLU_W>
    <ShRI_W>
    <SubI_W>
    <SubU_W>
    <Swap_W>

  argument-list:
    , argument argument-list(opt)

  argument:
    <Cpy> ( expression(opt) )
    <Far> ( argument argument-offset(opt) )
    <GblArr> ( argument , argument argument-offset(opt) )
    <GblArs> ( argument argument-offset(opt) )
    <GblReg> ( argument argument-offset(opt) )
    <Gen> ( argument argument-offset(opt) )
    <Lit> ( expression argument-offset(opt) )
    <Loc> ( argument argument-offset(opt) )
    <LocArs> ( argument argument-offset(opt) )
    <LocReg> ( argument argument-offset(opt) )
    <MapArr> ( argument , argument argument-offset(opt) )
    <MapArs> ( argument argument-offset(opt) )
    <MapReg> ( argument argument-offset(opt) )
    <Nul> ( )
    <Stk> ( )
    <StrArr> ( argument , argument argument-offset(opt) )
    <StrArs> ( argument argument-offset(opt) )
    <Vaa> ( argument argument-offset(opt) )
    <WldArr> ( argument , argument argument-offset(opt) )
    <WldArs> ( argument argument-offset(opt) )
    <WldReg> ( argument argument-offset(opt) )

  argument-offset:
    , expression

  expression:
    aggregate
    aggregate-string
    number
    string
    value
    <Add> ( expression , expression )
    <AddPtrRaw> ( expression , expression )
    <BitAnd> ( expression , expression )
    <BitOrI> ( expression , expression )
    <BitOrX> ( expression , expression )
    <CmpEQ> ( expression , expression )
    <CmpGE> ( expression , expression )
    <CmpGT> ( expression , expression )
    <CmpLE> ( expression , expression )
    <CmpLT> ( expression , expression )
    <CmpNE> ( expression , expression )
    <Cnd> ( expression , expression , expression )
    <Cst> ( type , expression )
    <Div> ( expression , expression )
    <Inv> ( expression )
    <LogAnd> ( expression , expression )
    <LogOrI> ( expression , expression )
    <LogOrX> ( expression , expression )
    <Mod> ( expression , expression )
    <Mul> ( expression , expression )
    <Neg> ( expression )
    <Not> ( expression )
    <ShL> ( expression , expression )
    <ShR> ( expression , expression )
    <Sub> ( expression , expression )
    -- expression
    ~ expression
    ! expression
    * expression expression
    / expression expression
    % expression expression
    + expression expression
    - expression expression
    << expression expression
    >> expression expression
    < expression expression
    > expression expression
    <= expression expression
    >= expression expression
    == expression expression
    != expression expression
    & expression expression
    ^ expression expression
    | expression expression
    && expression expression
    ^^ expression expression
    || expression expression
    ? expression expression expression

  type:
    type-Array
    type-Assoc
    type-Empty
    type-Fixed
    type-Float
    type-Funct
    type-Point
    type-StrEn
    type-Tuple
    type-Union

  type-Array:
    <Array> ( type , expression )

  type-Assoc:
    <Assoc> ( type-assoc-list(opt) )

  type-Empty:
    <Empty> ( )

  type-Fixed:
    <Fixed> ( expression , expression , expression , expression )

  type-Float:
    <Float> ( expression , expression , expression , expression )

  type-Funct:
    <Funct> ( call-type-specifier )

  type-Point:
    <Point> ( address-specifier string , expression , expression )

  type-StrEn:
    <StrEn> ( )

  type-Tuple:
    <Tuple> ( type-list(opt) )

  type-Union:
    <Union> ( type-list(opt) )

  type-assoc-list:
    type-assoc
    type-assoc , type-assoc-list

  type-assoc:
    type string expression

  type-list:
    type
    type , type-list

  aggregate:
    <Tuple> ( expression-list(opt) )
    { expression-list(opt) }
    [ expression-list(opt) ]

  expression-list:
    expression
    expression , expression-list

  aggregate-string:
    <string> type-Fixed(opt) string

  number:
    decimal-number number-suffix(opt)
    hexadecimal-number number-suffix(opt)
    octal-number number-suffix(opt)

  decimal-number:
    decimal-base decimal-fractional(opt) decimal-exponent(opt)
    decimal-integral(opt) decimal-fractional decimal-exponent(opt)

  hexadecimal-number:
    hexadecimal-base hexadecimal-fractional(opt) hexadecimal-exponent(opt)

  octal-number:
    octal-base decimal-exponent(opt)

  number-suffix:
    _ number-suffix-f(opt) number-suffix-s(opt) decimal-integral
      decimal-fractional number-suffix-s(opt)

  number-suffix-f: one of
    <F> <f>

  number-suffix-s: one of
    <S> <s>

  decimal-base:
    decimal-prefix decimal-integral(opt)

  decimal-fractional:
    . decimal-integral(opt)

  decimal-exponent:
    <E> sign(opt) decimal-integral
    <e> sign(opt) decimal-integral
    hexadecimal-exponent

  decimal-integral:
    digit decimal-integral(opt)

  decimal-prefix: one of
    1 2 3 4 5 6 7 8 9

  hexadecimal-base:
    hexadecimal-prefix hexadecimal-integral(opt)

  hexadecimal-fractional:
    . hexadecimal-integral(opt)

  hexadecimal-exponent:
    <P> sign(opt) decimal-integral
    <p> sign(opt) decimal-integral

  hexadecimal-integral:
    hexadecimal-digit hexadecimal-integral(opt)

  hexadecimal-digit: one of
    0 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f

  octal-base:
    octal-prefix octal-integral(opt)

  octal-prefix:
    0

  octal-integral:
    octal-digit octal-integral(opt)

  octal-digit: one of
    0 1 2 3 4 5 6 7

  sign: one of
    + -

  string:
    " char-sequence(opt) "

  char-sequence:
    char char-sequence(opt)

  char:
    any character except double-quote, backslash, or new-line
    escape-sequence

  escape-sequence:
    hexadecimal-escape-sequence
    octal-escape-sequence
    simple-escape-sequence

  hexadecimal-escape-sequence:
    \x hexadecimal-digit
    hexadecimal-escape-sequence hexadecimal-digit

  octal-escape-sequence:
    \ octal-digit
    \ octal-digit octal-digit
    \ octal-digit octal-digit octal-digit

  simple-escape-sequence: one of
    \' \" \? \\ \a \b \f \n \r \t \v

  value:
    <Value> value-Array
    <Value> value-Assoc
    <Value> value-Empty
    <Value> value-Funct
    <Value> value-Point
    <Value> value-StrEn
    <Value> value-Tuple
    <Value> value-Union

  value-Array:
    type-Array ( expression-list(opt) )

  value-Assoc:
    type-Assoc ( expression-list(opt) )

  value-Empty:
    type-Empty ( )

  value-Funct:
    type-Funct ( expression )

  value-Point:
    type-Point ( expression , address-specifier string )

  value-StrEn:
    type-StrEn ( expression )

  value-Tuple:
    type-Tuple ( expression-list(opt) )

  value-Union:
    type-Union ( expression )

  address-specifier:
    <Cpy>
    <Far>
    <GblArr>
    <GblArs>
    <GblReg>
    <Gen>
    <Lit>
    <Loc>
    <LocArs>
    <LocReg>
    <MapArr>
    <MapArs>
    <MapReg>
    <Nul>
    <Stk>
    <StrArr>
    <StrArs>
    <Vaa>
    <WldArr>
    <WldArs>
    <WldReg>

  call-type-specifier:
    <Action>
    <AsmFunc>
    <LangACS>
    <LangASM>
    <LangAXX>
    <LangC>
    <LangCXX>
    <LangDS>
    <Native>
    <Script>
    <ScriptI>
    <ScriptS>
    <Special>
    <StdCall>
    <StkCall>

  linkage-specifier:
    <ExtACS>
    <ExtASM>
    <ExtC>
    <ExtCXX>
    <ExtDS>
    <IntC>
    <IntCXX>

  script-type-specifier:
    <None>
    <Death>
    <Disconnect>
    <Enter>
    <Lightning>
    <Open>
    <Respawn>
    <Return>
    <Unloading>

###############################################################################
EOF
###############################################################################

